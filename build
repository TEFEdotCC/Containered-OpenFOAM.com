#!/bin/bash -xe

METIS_VERSION=5.1.0

# select qt platform
export QT_SELECT=qt4

# cpu count for compilation only.
[ -n "$WM_NCOMPPROCS" ] || export WM_NCOMPPROCS=$(grep -c ^processor /proc/cpuinfo)

[ -n "$SOURCE_BRANCH" ]  || SOURCE_BRANCH=$(git symbolic-ref -q --short HEAD)
[ -n "$GIT_SHA1" ]       || GIT_SHA1=$(git rev-parse -q HEAD)


# git repository
OF_GIT_BRANCH=$SOURCE_BRANCH
OF_GIT_URL="https://develop.openfoam.com/Development/openfoam.git"
OF_TP_GIT_URL="https://develop.openfoam.com/Development/ThirdParty-common.git"

if [[ "$SOURCE_BRANCH" == "master" ]]; then
        SOURCE_BRANCH="latest"
        OF_VERSION="latest"
        OF_GIT_HASH=$(git ls-remote "$OF_GIT_URL" | grep "      refs/heads/master" | cut -f 1)
        OF_GIT_BRANCH="master"
        OF_TP_GIT_BRANCH="master"

elif [[ "$SOURCE_BRANCH" == "dev" ]]; then
        SOURCE_BRANCH="dev"
        OF_VERSION="dev"
        OF_GIT_HASH=$(git ls-remote "$OF_GIT_URL" | grep "      refs/heads/develop" | cut -f 1)
        OF_GIT_BRANCH="develop"
        OF_TP_GIT_BRANCH="develop"

elif [[ "${SOURCE_BRANCH/-*/}" =~ ^[0-9][0-9.]*$ ]]; then
        OF_VERSION=${SOURCE_BRANCH/-*/}
        bname="maintenance-v${VERSION//.}"
        isAvailable=$(git ls-remote --heads "$OF_GIT_URL" $bname | wc -l)
        OF_TP_GIT_BRANCH="v${VERSION//.}"
        if [[ "$isAvailable" == "1" ]]; then
                OF_GIT_HASH=$(git ls-remote "$OF_GIT_URL" | grep "      refs/heads/$bname" | cut -f 1)
                OF_GIT_BRANCH="$bname"
        else
                echo "DEBUG: $bname is not available. Go back to initial release channel."
                # use tag branch
                bname="OpenFOAM-v${VERSION//.}"
                isAvailable2=$(git ls-remote --tags "$OF_GIT_URL" $bname | wc -l)
                if [[ "$isAvailable2" == "1" ]]; then
                        OF_GIT_HASH=$(git ls-remote "$OF_GIT_URL" | grep "      refs/tags/$bname" | cut -f 1)
                        OF_GIT_BRANCH="$bname"
                else
                        echo "ERROR: $bname is not available."
                        exit -1
                fi
        fi
else
        echo "ERROR: Source Branch not found"
        exit -1;
fi

# Set defaults for build arguments
[ -n "$SOURCE_TYPE" ]        || SOURCE_TYPE=git
[ -n "$IMAGE_NAME" ]         || IMAGE_NAME=tefe/openfoamplus:${SOURCE_BRANCH}


# Create a container
newc=$(buildah from ubuntu:20.04)

# install basic software
buildah run $newc ln -fs /usr/share/zoneinfo/Europe/Berlin /etc/localtime
buildah run $newc apt-get update -y
buildah run $newc DEBIAN_FRONTEND=noninteractive apt-get install -f -y                  \
  sudo curl wget curl git nano vim libfl-dev                                            \
  build-essential autoconf autotools-dev cmake gawk gnuplot                             \
  flex bison zlib1g-dev libboost-system-dev libboost-thread-dev                         \
  libopenmpi-dev openmpi-bin libreadline-dev libncurses-dev libxt-dev                   \
  libscotch-dev libptscotch-dev libcgal-dev                                             \
  bash bash-completion libboost-all-dev                                                 \
  libopenmpi-dev mpi-default-bin mpi-default-dev libgmp-dev libmpfr-dev libmpc-dev      \
  libscotch-dev libptscotch-dev libfftw3-dev libboost-system-dev libboost-thread-dev    \
  libcgal-dev bc fftw3 m4                                                               \
 && rm -rf /var/lib/apt/lists/*


#groupadd foam
buildah run $newc useradd --shell /bin/zsh --create-home -U foam               \
  && echo "foam ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers                        \
  && echo 127.0.1.1 $(hostname) >> /etc/hosts

buildah run $newc echo "include /usr/share/nano/*" >> /home/foam/.nanorc       \
  && chown foam:foam /home/foam/.nanorc


# config env for OpenFOAM
buildah run $newc                                                                             \
     echo "export OF_VERSION=${OF_VERSION}" >> /home/foam/.bashrc                             \
  && echo "source /opt/OpenFOAM-v${OF_VERSION}/etc/bashrc" >> /home/foam/.bashrc              \
  && echo "export OMPI_MCA_btl_vader_single_copy_mechanism=none" >> /home/foam/.bashrc        \
  && echo "export PATH=$PATH:/usr/lib64/openmpi/bin/" >> /home/foam/.bashrc                   \
  && chown foam:foam /home/foam/.bashrc


# load sources
buildah run $newc git clone --branch $OF_GIT_BRANCH $OF_GIT_URL "/opt/OpenFOAM-v${OF_VERSION}"
buildah run $newc git clone --branch $OF_TP_GIT_BRANCH $OF_TP_GIT_URL "/opt/ThirdParty-v${OF_VERSION}"

buildah run $newc cd "/opt/ThirdParty-v${OF_VERSION}"                                         \
  && wget -q "http://glaros.dtc.umn.edu/gkhome/fetch/sw/metis/metis-${METIS_VERSION}.tar.gz"  \
  && gunzip "metis-${METIS_VERSION}.tar.gz"                                                   \
  && tar -xvf "metis-${METIS_VERSION}.tar"                                                    \
  && rm -f "metis-${METIS_VERSION}.tar.gz" "metis-${METIS_VERSION}.tar"

buildah run $newc                                                                             \
  export PATH=$PATH:/usr/lib64/openmpi/bin/                                                   \
  && . /opt/OpenFOAM-v${OF_VERSION}/etc/bashrc                                                \
  && cd /opt/ThirdParty-v${OF_VERSION}                                                        \
  && ./Allwmake -j -s -q -a                                                                   \
  && cd /opt/OpenFOAM-v${OF_VERSION}                                                          \
  && ./Allwmake -j -s -q -a


# cleanup
buildah run $newc                                                                             \
  rm -rf /opt/ThirdParty-v${OF_VERSION}                                                       \
  && cd /opt/OpenFOAM-v${OF_VERSION}                                                          \
  && find -name "*.o" | xargs rm                                                              \
  && find -name "*.dep" | xargs rm                                                            \
  && rm -rf build/* .git


# config entry
buildah config                                                                                \
  --user foam:foam                                                                            \
  --shell "/bin/bash -c"                                                                      \
  --volume "/data"                                                                            \
  --workingDir "/data"                                                                        \
  --entrypoint "/bin/bash -ci"                                                                \
  --label maintainer="Thomas Enzinger <info@thomas-enzinger.de>"                              \
  --author='Thomas Enzinger'                                                                  \
  $newc

# Finally saves the running container to an image
buildah commit --rm --format docker $newc $IMAGE_NAME

